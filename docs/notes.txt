{
"measurement_id": "88d58a78-95d3-4b9c-b0a4-aab2e2ed73d5",
"sensor_id": "HUM-001",
"date": "2024-05-28T15:22:18+02:00",
"station": "MET-004",
"info": {
	"category": "Humidity",
	"measurement": 40,
	"unit": "Percentage"
}
}


==== DB selection
For storing and efficiently querying your meteorological sensor measurements with the given JSON structure, a time-series optimized relational database like TimescaleDB (PostgreSQL extension) is a very good fit.

Why TimescaleDB?
-> It extends PostgreSQL with time-series functionality.

-> Supports efficient partitioning ("hypertables") by time and other dimensions.

-> Allows complex SQL queries, including grouping by date, station, and category, with high performance.

-> Can handle large volumes of IoT data with time range and aggregation queries.

-> Supports native JSONB for flexible fields.

==== Why not mongo?
MongoDB Limitations for Your Use Case:
Aggregation queries involving grouping by timestamp, station, and category are less efficient than in TimescaleDB.

Complex queries such as multi-dimensional aggregates, roll-ups, or per-device/per-hour calculations perform significantly slower in MongoDB.

MongoDB lacks the same level of native SQL support and relational joins which make querying across dimensions easier.

Benchmarks show TimescaleDB can be 10-20x faster on common IoT time-series aggregate queries, and 50x faster on complex queries.






v@faros:~/git/weather-station$ docker run -d --name timescaledb -p 5432:5432  -v./pgdata:/pgdata -e PGDATA=/pgdata -e POSTGRES_PASSWORD=password timescale/timescaledb-ha:pg17



(kill and chmod on pgdata to give postgres user full permission: 
v@faros:~/git/weather-station$ sudo chown 1000:1000 pgdata



v@faros:~/git/weather-station$ psql -d "postgres://postgres:password@localhost/postgres"
Command 'psql' not found, but can be installed with:
sudo apt install postgresql-client-common
v@faros:~/git/weather-station$ docker exec -it timescaledb psql -U postgres
psql (17.6 (Ubuntu 17.6-1.pgdg22.04+1))
Type "help" for help.

postgres=# \dx
                                                    List of installed extensions
        Name         | Version |   Schema   |                                      Description                                      
---------------------+---------+------------+---------------------------------------------------------------------------------------
 plpgsql             | 1.0     | pg_catalog | PL/pgSQL procedural language
 timescaledb         | 2.21.3  | public     | Enables scalable inserts and complex queries for time-series data (Community Edition)
 timescaledb_toolkit | 1.21.0  | public     | Library of analytical hyperfunctions, time-series pipelining, and other SQL utilities
(3 rows)


curl --header "Content-Type: application/json" \
  --request POST \
  --data '{ \
  "measurement_id": "88d58a78-95d3-4b9c-b0a4-aab2e2ed73d5", \
"sensor_id": "HUM-001", \
"date": "2024-05-28T15:22:18+02:00", \
"station": "MET-004", \
"info": { \
	"category": "Humidity", \
	"measurement": 40, \
	"unit": "Percentage" \
} \
}' \
  http://localhost:5000/ingest
  
  
  
curl --header "Content-Type: application/json" --request POST --data '{ "measurement_id": "88d58a78-95d3-4b9c-b0a4-aab2e2ed73d5", "sensor_id": "HUM-001" }'  http://localhost:5000/ingest


flask db init && flask db migrate && flask db upgrade

